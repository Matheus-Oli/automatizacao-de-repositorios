name: Criar Reposit√≥rio e Deploy Vercel

on:
  workflow_dispatch:
    inputs:
      tipo:
        description: 'Tipo do projeto (site ou lp)'
        required: true
        default: 'site'
      empresa:
        description: 'Nome da empresa/projeto'
        required: true
      nome_vercel:
        description: 'Nome do projeto na Vercel (define o dom√≠nio)'
        required: true
      build_command:
        description: 'Comando de build'
        required: false
        default: 'npm run build'
      output_directory:
        description: 'Diret√≥rio de output'
        required: false
        default: 'dist/spa/'
      install_command:
        description: 'Comando de instala√ß√£o'
        required: false
        default: 'npm i --legacy-peer-deps'
      framework:
        description: 'Framework do projeto'
        required: true
        type: choice
        default: 'vite'
        options:
          - vite
          - angular
          - react
          - nextjs
          - other

jobs:
  criar-e-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar depend√™ncias
        run: npm install

      - name: Verificar arquivos
        run: |
          echo "Diret√≥rio atual:"
          pwd
          echo "Listagem de arquivos:"
          ls -R

      - name: Definir configura√ß√µes do framework
        id: framework_config
        run: |
          # Primeiro define os defaults baseados no framework
          case "${{ github.event.inputs.framework }}" in
            "vite")
              DEFAULT_BUILD="npm run build"
              DEFAULT_OUTPUT="dist/spa/"
              DEFAULT_INSTALL="npm i --legacy-peer-deps"
              FRAMEWORK_NAME="vite"
              ;;
            "angular")
              DEFAULT_BUILD="npm run build"
              DEFAULT_OUTPUT="dist/"
              DEFAULT_INSTALL="npm ci"
              FRAMEWORK_NAME="angular"
              ;;
            "react")
              DEFAULT_BUILD="npm run build"
              DEFAULT_OUTPUT="build/"
              DEFAULT_INSTALL="npm ci"
              FRAMEWORK_NAME="create-react-app"
              ;;
            "nextjs")
              DEFAULT_BUILD="npm run build"
              DEFAULT_OUTPUT=""
              DEFAULT_INSTALL="npm ci"
              FRAMEWORK_NAME="nextjs"
              ;;
            "other")
              DEFAULT_BUILD="npm run build"
              DEFAULT_OUTPUT="dist/"
              DEFAULT_INSTALL="npm ci"
              FRAMEWORK_NAME="vite"
              ;;
          esac
          
          # Usa o input customizado se fornecido, sen√£o usa o default
          BUILD_CMD="${{ github.event.inputs.build_command }}"
          OUTPUT_DIR="${{ github.event.inputs.output_directory }}"
          INSTALL_CMD="${{ github.event.inputs.install_command }}"
          
          echo "BUILD_COMMAND=${BUILD_CMD:-$DEFAULT_BUILD}" >> $GITHUB_OUTPUT
          echo "OUTPUT_DIRECTORY=${OUTPUT_DIR:-$DEFAULT_OUTPUT}" >> $GITHUB_OUTPUT
          echo "INSTALL_COMMAND=${INSTALL_CMD:-$DEFAULT_INSTALL}" >> $GITHUB_OUTPUT
          echo "FRAMEWORK=$FRAMEWORK_NAME" >> $GITHUB_OUTPUT
          
          # Log das configura√ß√µes finais
          echo "üì¶ Configura√ß√µes finais:"
          echo "   Build Command: ${BUILD_CMD:-$DEFAULT_BUILD}"
          echo "   Output Directory: ${OUTPUT_DIR:-$DEFAULT_OUTPUT}"
          echo "   Install Command: ${INSTALL_CMD:-$DEFAULT_INSTALL}"
          echo "   Framework: $FRAMEWORK_NAME"

      - name: Criar Reposit√≥rio
        id: criar_repo
        working-directory: ${{ github.workspace }}
        run: |
          PREFIX="${{ github.event.inputs.tipo }}-${{ github.event.inputs.empresa }}"
          echo "REPO_NAME=$PREFIX" >> $GITHUB_OUTPUT
          node scripts/criar-repos.js "$PREFIX" "${{ github.event.inputs.tipo }}"
        env:
          GHUB_TOKEN: ${{ secrets.GHUB_TOKEN }}

      - name: Aguardar reposit√≥rio ficar dispon√≠vel
        run: sleep 15

      - name: Criar projeto na Vercel
        id: vercel_deploy
        uses: actions/github-script@v7
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        with:
          script: |
            const repoName = '${{ steps.criar_repo.outputs.REPO_NAME }}';
            const vercelProjectName = '${{ github.event.inputs.nome_vercel }}';
            const repoFullName = `${{ github.repository_owner }}/${repoName}`;
            
            // Configura√ß√µes din√¢micas baseadas no framework escolhido
            const buildCommand = '${{ steps.framework_config.outputs.BUILD_COMMAND }}';
            const outputDirectory = '${{ steps.framework_config.outputs.OUTPUT_DIRECTORY }}';
            const installCommand = '${{ steps.framework_config.outputs.INSTALL_COMMAND }}';
            const framework = '${{ steps.framework_config.outputs.FRAMEWORK }}';
            
            const projectConfig = {
              name: vercelProjectName,
              gitRepository: {
                type: 'github',
                repo: repoFullName
              },
              buildCommand: buildCommand,
              installCommand: installCommand,
              framework: framework,
              publicSource: false
            };
            
            // S√≥ adiciona outputDirectory se n√£o estiver vazio (Next.js n√£o precisa)
            if (outputDirectory) {
              projectConfig.outputDirectory = outputDirectory;
            }
            
            console.log('Criando projeto Vercel com config:', JSON.stringify(projectConfig, null, 2));
            
            // Criar projeto na Vercel
            const vercelResponse = await fetch('https://api.vercel.com/v9/projects', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.VERCEL_TOKEN}`,
                'Content-Type': 'application/json',
                ...(process.env.VERCEL_ORG_ID && { 'X-Vercel-Team-Id': process.env.VERCEL_ORG_ID })
              },
              body: JSON.stringify(projectConfig)
            });
            
            if (!vercelResponse.ok) {
              const error = await vercelResponse.text();
              console.error('Resposta da Vercel:', error);
              throw new Error(`Erro ao criar projeto Vercel (${vercelResponse.status}): ${error}`);
            }
            
            const vercelProject = await vercelResponse.json();
            
            console.log(`‚úÖ Projeto Vercel criado: ${vercelProject.name}`);
            console.log(`üîó URL do projeto: https://${vercelProjectName}.vercel.app`);
            
            core.setOutput('vercel_url', `https://${vercelProjectName}.vercel.app`);
            core.setOutput('vercel_project_id', vercelProject.id);
            core.setOutput('vercel_name', vercelProject.name);
            
            return vercelProject;

      - name: Configurar branch de produ√ß√£o na Vercel
        uses: actions/github-script@v7
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        with:
          script: |
            const projectId = '${{ steps.vercel_deploy.outputs.vercel_project_id }}';
            const repoName = '${{ steps.criar_repo.outputs.REPO_NAME }}';
            const repoFullName = `${{ github.repository_owner }}/${repoName}`;
            
            const buildCommand = '${{ steps.framework_config.outputs.BUILD_COMMAND }}';
            const outputDirectory = '${{ steps.framework_config.outputs.OUTPUT_DIRECTORY }}';
            const installCommand = '${{ steps.framework_config.outputs.INSTALL_COMMAND }}';
            const framework = '${{ steps.framework_config.outputs.FRAMEWORK }}';
            
            const updateConfig = {
              gitRepository: {
                type: 'github',
                repo: repoFullName,
                productionBranch: 'prd'
              },
              buildCommand: buildCommand,
              installCommand: installCommand,
              framework: framework
            };
            
            // S√≥ adiciona outputDirectory se n√£o estiver vazio
            if (outputDirectory) {
              updateConfig.outputDirectory = outputDirectory;
            }
            
            // Configurar branch 'prd' como branch de produ√ß√£o
            const updateResponse = await fetch(`https://api.vercel.com/v9/projects/${projectId}`, {
              method: 'PATCH',
              headers: {
                'Authorization': `Bearer ${process.env.VERCEL_TOKEN}`,
                'Content-Type': 'application/json',
                ...(process.env.VERCEL_ORG_ID && { 'X-Vercel-Team-Id': process.env.VERCEL_ORG_ID })
              },
              body: JSON.stringify(updateConfig)
            });
            
            if (updateResponse.ok) {
              const updatedProject = await updateResponse.json();
              console.log('‚úÖ Projeto atualizado com branch "prd" como produ√ß√£o');
              console.log(`‚úÖ Configura√ß√µes do ${framework.toUpperCase()} aplicadas`);
            } else {
              const error = await updateResponse.text();
              console.warn('‚ö†Ô∏è Resposta da atualiza√ß√£o:', error);
              
              // Tentar abordagem alternativa usando settings
              const settingsResponse = await fetch(`https://api.vercel.com/v1/projects/${projectId}/settings`, {
                method: 'PATCH',
                headers: {
                  'Authorization': `Bearer ${process.env.VERCEL_TOKEN}`,
                  'Content-Type': 'application/json',
                  ...(process.env.VERCEL_ORG_ID && { 'X-Vercel-Team-Id': process.env.VERCEL_ORG_ID })
                },
                body: JSON.stringify({
                  productionBranch: 'prd'
                })
              });
              
              if (settingsResponse.ok) {
                console.log('‚úÖ Branch "prd" configurada como produ√ß√£o (m√©todo alternativo)');
              } else {
                console.warn('‚ö†Ô∏è N√£o foi poss√≠vel configurar branch de produ√ß√£o automaticamente');
                console.log('‚ÑπÔ∏è Voc√™ pode configurar manualmente na dashboard da Vercel');
              }
            }

      - name: Configurar webhooks e prote√ß√µes do reposit√≥rio
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GHUB_TOKEN }}
          script: |
            const repoName = '${{ steps.criar_repo.outputs.REPO_NAME }}';
            
            try {
              // Configurar branch protection para prd (n√£o para main)
              await github.rest.repos.updateBranchProtection({
                owner: context.repo.owner,
                repo: repoName,
                branch: 'prd',
                required_status_checks: {
                  strict: false,
                  contexts: []
                },
                enforce_admins: false,
                required_pull_request_reviews: null,
                restrictions: null,
                allow_force_pushes: true,
                allow_deletions: false
              });
              
              console.log('‚úÖ Branch protection configurada para "prd"');
            } catch (error) {
              console.log('‚ö†Ô∏è Branch protection n√£o configurada:', error.message);
            }

      - name: Criar resumo do projeto
        run: |
          echo "## üöÄ Projeto Criado com Sucesso!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Detalhes do Projeto:" >> $GITHUB_STEP_SUMMARY
          echo "- **Nome:** ${{ steps.criar_repo.outputs.REPO_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tipo:** ${{ github.event.inputs.tipo }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Empresa:** ${{ github.event.inputs.empresa }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Nome Vercel:** ${{ github.event.inputs.nome_vercel }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework:** ${{ github.event.inputs.framework }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Reposit√≥rio:** [GitHub](https://github.com/${{ github.repository_owner }}/${{ steps.criar_repo.outputs.REPO_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Site Vercel:** [${{ steps.vercel_deploy.outputs.vercel_url }}](${{ steps.vercel_deploy.outputs.vercel_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚öôÔ∏è Configura√ß√µes Vercel:" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework:** ${{ steps.framework_config.outputs.FRAMEWORK }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Command:** ${{ steps.framework_config.outputs.BUILD_COMMAND }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Directory:** ${{ steps.framework_config.outputs.OUTPUT_DIRECTORY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Install Command:** ${{ steps.framework_config.outputs.INSTALL_COMMAND }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch de Produ√ß√£o:** prd" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Comandos Personalizados:" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ github.event.inputs.build_command }}" ]; then
            echo "- ‚úÖ Build customizado: \`${{ github.event.inputs.build_command }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üìã Build padr√£o usado" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ github.event.inputs.output_directory }}" ]; then
            echo "- ‚úÖ Output customizado: \`${{ github.event.inputs.output_directory }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üìã Output padr√£o usado" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ github.event.inputs.install_command }}" ]; then
            echo "- ‚úÖ Install customizado: \`${{ github.event.inputs.install_command }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üìã Install padr√£o usado" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Pr√≥ximos passos:" >> $GITHUB_STEP_SUMMARY
          echo "1. üìÅ Adicione seus arquivos no reposit√≥rio" >> $GITHUB_STEP_SUMMARY
          echo "2. üîÑ Fa√ßa commit e push para a branch **prd**" >> $GITHUB_STEP_SUMMARY
          echo "3. üöÄ O deploy autom√°tico ser√° disparado na Vercel" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Importante:** Deploy autom√°tico acontece apenas na branch **prd**, n√£o na main!"